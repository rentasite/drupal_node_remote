<?php
// $Id$

/**
 * @file
 * node_remote module file.
 *
 * This module provides client API for node services.
 */

/**
 * Remote Node API functions.
 */

/**
 * Retrieve a node object via remote service.
 *
 * @param $nid
 *   The ID of node.
 * @param $reset
 *   Whether or not to reset this function's internal cache (defaults to
 *   FALSE).
 *
 * @return
 *   A fully-populated node object.
 */
function node_remote_load($nid, $reset = NULL) {

  if (!$reset && ($cache = cache_get('node_remote_node:'.$nid)) && !empty($cache->data)) {
    $node = $cache->data;
  }
  else {
    // node.get
    if ($xmlrpc_result = clients_xmlrpc_call('node.get', $nid)) {
      //error_log(sprintf('%s', print_r($xmlrpc_result, true)));
      $node = $xmlrpc_result;
      cache_set('node_remote_node:'.$nid, $node, 'cache', CACHE_TEMPORARY);
    }
  }

  return $node;
}

/**
 * Retrive the list of nodes via remote service.
 *
 * @param $type
 *   The type of node
 *
 * @return
 *   Array of available nodes.
 */
function node_remote_nodes($type = '') {
  static $nodes = array();

  if (!count($nodes)) {
    // nodelist.get
    if ($xmlrpc_result = clients_xmlrpc_call('nodelist.get', $type)) {
      //error_log(sprintf('%s', print_r($xmlrpc_result, true)));
      $nodes = $xmlrpc_result;
    }
  }

  return $nodes;
}

/**
 * Retrive the list of node types via remote service.
 *
 * @param $op
 *   The format in which to return the list, 'types' or 'names'.
 *
 * @return
 *   Array of available node types.
 */
function node_remote_types($op = 'types') {
	static $types = array();

  if (!count($types)) {
    // nodelist.types
    if ($xmlrpc_result = clients_xmlrpc_call('nodelist.types', $op)) {
      //error_log(sprintf('%s', print_r($xmlrpc_result, true)));
      $types = $xmlrpc_result;
    }
  }

  return $types;
}
